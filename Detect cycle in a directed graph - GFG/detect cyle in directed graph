
class Solution {
    public boolean dfs(boolean vis[],boolean path[],ArrayList<ArrayList<Integer>>adj,int i){
    vis[i]=true;
    path[i]=true;
    for(int nbr:adj.get(i)){
        if(vis[nbr] && path[nbr]){return true;}
     else if(!vis[nbr]){boolean in=dfs(vis,path,adj,nbr);
        if(in){ return true;}
    }}
    path[i]=false;
    return false;}
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean path[]=new boolean[V];
        boolean vis[]=new boolean[V];
        for(int i=0;i<V;i++){
            if(vis[i]){continue;}
            boolean is=dfs(vis,path,adj,i);
            if(is){
                return true;
            }
        }
        return false;
    }
}