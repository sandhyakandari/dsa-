
class BSTIterator {
    Stack<pair>st;
  class pair{
  TreeNode node; int state;
  pair(TreeNode node,int state){
      this.node=node;
      this.state=state;
  }
  }
    public BSTIterator(TreeNode root) {
        st=new Stack<>();
        st.push(new pair(root,1));
    }
    
    public int next() {
     while(st.size()>0){
         pair r=st.peek();
         if(r.state==1){ r.state++;
         if(r.node.left!=null){
          st.push(new pair(r.node.left,1));   
         } }
     else if(r.state==2){
        
        st.pop(); r.state++;
         if(r.node.right!=null){ st.push(new pair(r.node.right,1));}
   return r.node.val;  }}
    return -1;}
    
    public boolean hasNext() {
      return st.size()>0 ;
    }
}